{"version":3,"file":"static/js/297.c5f6de5c.chunk.js","mappings":"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","sources":["webpack://samurai-social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem.tsx","components/Dialogs/Message.tsx","components/Dialogs/MessageSenderContainer.tsx","components/Dialogs/MessageSender.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthNavigate.tsx","components/Dialogs/DialogsContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MuiPaper-root\":\"Dialogs_MuiPaper-root__1ov-Z\",\"dialog\":\"Dialogs_dialog__Lu4wW\",\"text\":\"Dialogs_text__-o7xo\",\"messageContainer\":\"Dialogs_messageContainer__nNdvr\"};","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from './Dialogs.module.css'\nimport { Box } from \"@mui/material\";\n\ntype DialogItemsType = {\n    name: string\n    id: string | number\n    user: string\n}\nconst DialogItems = (props: DialogItemsType) => {\n        const path = '/dialogs/' + props.id\n\n        return (\n            <Box className={s.dialog + ' ' + s.active}>\n                <img alt='user_photo'\n                    src={props.user}\n                />\n                <NavLink id={'name'} to={path}>{props.name}</NavLink>\n            </Box>\n        )\n    }\n\n;\n\nexport default DialogItems","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport {makeStyles} from \"@mui/styles\";\nimport {createTheme} from \"@mui/system\";\nimport {Grid} from \"@mui/material\";\n\ntype MessageType = {\n    id: string | number\n    message: string\n}\n\nconst theme = createTheme();\nconst useStyles = makeStyles({\n    text: {\n        maxWidth: '527px',\n        borderRadius: '10px 10px 0 10px',\n        backgroundColor: '#25476a',\n        color: 'white',\n        padding: theme.spacing(1),\n        [theme.breakpoints.between('xs', 'md')]: {\n\n            padding: theme.spacing(0.5),\n        }\n    },\n\n})\nconst Message = (props: MessageType) => {\n    const classes = useStyles()\n    return (\n        <div className={s.messageContainer} >\n\n            <Grid className={classes.text} > {props.message}</Grid>\n\n        </div>\n    )\n}\n\nexport default Message\n\n","import {AppRootStateType} from \"../../redux/store\";\nimport {InitialMessagesPageType, sendNewMessageAC, updateNewMessageTextAC} from \"../../redux/dialogs-reducer\";\nimport {MessageSender} from \"./MessageSender\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\ntype MapStatePropsType = {\n    newMessage: InitialMessagesPageType\n}\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\n    return {\n        newMessage: state.dialogs\n    }\n}\n\ntype MapDispatchPropsType = {\n    newTextHandler: (newText: string) => void\n    onSendMessageClick: () => void\n\n}\nexport type NewDialogsMessageType = MapStatePropsType & MapDispatchPropsType\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        newTextHandler: (newText: string) => {\n            dispatch(updateNewMessageTextAC(newText))\n        },\n        onSendMessageClick: () => {\n            dispatch(sendNewMessageAC())\n        }\n    }\n}\n\nexport const MessageSenderContainer = connect(mapStateToProps, mapDispatchToProps)(MessageSender);\n\n\n\n\n","import React, {ChangeEvent} from 'react';\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport {NewDialogsMessageType} from \"./MessageSenderContainer\";\n\nexport const MessageSender = (props: NewDialogsMessageType) => {\n\n    const addMessage = () => {\n        props.onSendMessageClick()\n    }\n\n    const newTextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let newText = e.currentTarget.value\n        props.newTextHandler(newText)\n    }\n\n    return (\n        <>\n            <TextField\n              id={\"messageSender\"}\n                size=\"small\"\n                placeholder={'Type your text'}\n                value={props.newMessage.newMessageText}\n                onChange={newTextHandler}\n            />\n            <Button sx={{ background: '#25476a',\n            }}\n\n                onClick={addMessage}\n                    size='small'\n                    variant=\"contained\"\n            >\n                Send\n            </Button>\n        </>\n    )\n}\n\n","import React from \"react\";\r\nimport DialogItems from \"./DialogItem\";\r\nimport Message from \"./Message\";\r\nimport { MessageSenderContainer } from \"./MessageSenderContainer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { createTheme } from \"@mui/system\";\r\nimport { DialogsPropsType } from \"./DialogsContainer\";\r\nimport { Box, Grid, Paper } from \"@mui/material\";\r\nimport './Dialogs.module.css'\r\n\r\nconst theme = createTheme();\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    padding: theme.spacing(2)\r\n\r\n  },\r\n  parentPaper: {\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    padding: theme.spacing(2),\r\n    height: \"70vh\",\r\n    [theme.breakpoints.between(\"xs\", \"md\")]: {\r\n      padding: theme.spacing(0)\r\n    }\r\n\r\n  },\r\n  messageBox: {\r\n    overflowY: \"scroll\",\r\n    height: \"50vh\",\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    gap: \"20px\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: '#ECECEC'\r\n  },\r\n  dialogs: {\r\n    display: \"flex\",\r\n\r\n    [theme.breakpoints.between(\"xs\", \"md\")]: {\r\n      flexDirection: \"column\",\r\n      visibility: \"hidden\"\r\n    }\r\n  },\r\n  sender: {\r\n    display: \"flex\",\r\n    justifyContent: \"end\"\r\n  }\r\n\r\n});\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const classes = useStyles();\r\n\r\n    const mappedDialogs = props.messagesState.dialogs.map((el) => (\r\n      <DialogItems\r\n        key={el._id}\r\n        name={el.name}\r\n        id={el._id}\r\n        user={el.avatar} />\r\n    ));\r\n\r\n    const mappedMessages = props.messagesState.chatBoxMessages.map((el) => (\r\n      <Message\r\n        key={el._id}\r\n        message={el.message}\r\n        id={el._id} />\r\n    ));\r\n\r\n    return <div className={classes.root}>\r\n      <Grid container rowSpacing={1}>\r\n        <Grid item xs={6} sm={8} md={12}>\r\n          <Paper className={classes.messageBox}>{mappedMessages}</Paper>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={4} container>\r\n          <Box className={classes.dialogs}\r\n          > {mappedDialogs}</Box>\r\n        </Grid>\r\n        <Grid item xs={12} sm={8} md={8} container>\r\n          <Grid xs={12} item container direction=\"column\">\r\n            <Grid className={classes.sender}>\r\n              <MessageSenderContainer />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>;\r\n  }\r\n;","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppRootStateType } from \"../redux/store\";\r\nimport { compose } from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.userAuth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthNavigate<T>(Component: any) {\r\n\r\n    const NavigateComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n        return (\r\n            <>\r\n                <Component  {...(restProps as T)}/>\r\n            </>\r\n          )\r\n\r\n    }\r\n\r\n    return compose<React.ComponentType>(connect(mapStateToProps)(NavigateComponent))\r\n}\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {InitialMessagesPageType} from \"../../redux/dialogs-reducer\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\nimport {withAuthNavigate} from \"../../hoc/withAuthNavigate\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  messagesState: InitialMessagesPageType\r\n\r\n}\r\nexport type DialogsPropsType = MapStatePropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n  return {\r\n    messagesState: state.dialogs,\r\n\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps),\r\n  withAuthNavigate\r\n)(Dialogs)","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["props","path","id","_jsxs","Box","className","s","dialog","active","children","_jsx","alt","src","user","NavLink","to","name","theme","createTheme","useStyles","makeStyles","text","_defineProperty","maxWidth","borderRadius","backgroundColor","color","padding","spacing","breakpoints","between","classes","messageContainer","Grid","message","MessageSenderContainer","connect","state","newMessage","dialogs","dispatch","newTextHandler","newText","updateNewMessageTextAC","onSendMessageClick","sendNewMessageAC","_Fragment","TextField","size","placeholder","value","newMessageText","onChange","e","currentTarget","Button","sx","background","onClick","variant","root","parentPaper","margin","width","height","messageBox","overflowY","display","gap","flexDirection","visibility","sender","justifyContent","mapStateToProps","isAuth","userAuth","compose","messagesState","Component","restProps","_objectWithoutProperties","_excluded","_objectSpread","Navigate","mappedDialogs","map","el","DialogItems","_id","avatar","mappedMessages","chatBoxMessages","Message","container","rowSpacing","item","xs","sm","md","Paper","direction","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}